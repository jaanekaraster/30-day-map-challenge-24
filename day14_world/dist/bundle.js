/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/***/ (() => {

eval("// Access token for your Mapbox API key\r\nconst mapboxToken = \"pk.eyJ1IjoiamFhbmVrYS1yYXN0ZXIiLCJhIjoiY20zdDN3bTllMDUwZjJrcjAyaGg4NWpoYSJ9.tnQGSL1nwQuqyPPezqNaSg\";\r\nconst mapboxStyleUrl = \"mapbox://styles/jaaneka-raster/cm3t3yvur002n01qu3ojc7cz4\";\r\n\r\nmapboxgl.accessToken = mapboxToken;\r\n\r\nconsole.log('Mapbox API Key:', \"pk.eyJ1IjoiamFhbmVrYS1yYXN0ZXIiLCJhIjoiY20zdDN3bTllMDUwZjJrcjAyaGg4NWpoYSJ9.tnQGSL1nwQuqyPPezqNaSg\");\r\nconsole.log('Mapbox Style URL:', \"mapbox://styles/jaaneka-raster/cm3t3yvur002n01qu3ojc7cz4\");\r\n\r\n// Create the map object and set the style to your custom Mapbox Studio style URL\r\nconst map = new mapboxgl.Map({\r\n  container: 'map', // The container where the map will be displayed\r\n  style: mapboxStyleUrl, // Replace with your own style URL\r\n  center: [137.46463,36.81198], // Set the initial map center [longitude, latitude]\r\n  zoom: 12.23 // Set the initial zoom level\r\n});\r\n\r\nself.addEventListener('fetch', (event) => {\r\n    event.respondWith(\r\n        caches.open('mapbox-cache').then((cache) => {\r\n            return cache.match(event.request).then((response) => {\r\n                return response || fetch(event.request).then((fetchedResponse) => {\r\n                    cache.put(event.request, fetchedResponse.clone());\r\n                    return fetchedResponse;\r\n                });\r\n            });\r\n        })\r\n    );\r\n});\r\n\r\n// Function to reset map view\r\nfunction resetMapView(lat, lng, zoom) {\r\n    map.setCenter([lng, lat]);  // Set the center (longitude, latitude)\r\n    map.setZoom(zoom);          // Set the zoom level\r\n}\r\ndocument.getElementById('buttons').addEventListener('click', function(event) {\r\n    // Check if the clicked element is a button\r\n    if (event.target && event.target.matches('.button')) {\r\n        // Remove the 'active' class from all buttons\r\n        const buttons = document.querySelectorAll('.button');\r\n        buttons.forEach(button => button.classList.remove('active'));\r\n        \r\n        // Add the 'active' class to the clicked button\r\n        event.target.classList.add('active');\r\n    }\r\n});\r\n\r\n// Event listeners for each button\r\n// document.getElementById('button-hylia').addEventListener('click', function() {\r\n//     resetMapView(13.0261, 14.5505, 10.22); // Global view\r\n// });\r\n\r\ndocument.getElementById('button-hylia').addEventListener('click', function() {\r\n    resetMapView(-40.2227459, -72.4110606, 10.22);\r\n});\r\n\r\ndocument.getElementById('button-gerudo').addEventListener('click', function() {\r\n    resetMapView(15.8929, 48.6987, 10.56); \r\n    });\r\n\r\ndocument.getElementById('button-lon').addEventListener('click', function() {\r\n    resetMapView(27.50767, -97.88502, 12.27); \r\n    });\r\n\r\ndocument.getElementById('button-kokiri').addEventListener('click', function() {\r\n    resetMapView(27.5501, 96.4487, 9.56); \r\n    });\r\ndocument.getElementById('button-woods').addEventListener('click', function() {\r\n    resetMapView(48.9157, 13.2556, 10.88); \r\n    });\r\ndocument.getElementById('button-castle').addEventListener('click', function() {\r\n    resetMapView(35.02071, 135.76545, 12); \r\n    });\r\ndocument.getElementById('button-mountain').addEventListener('click', function() {\r\n    resetMapView(-1.5683, 29.2483, 11.52); \r\n    });\r\n\r\n//lake hylia: 13.0261, 14.5505, 10.22 (lake chad, chad)\r\n//gerudo valley: 10.56/15.8929/48.6987 (hadramout, yemen)\r\n//death mountain: 11.52/-1.5683/29.2483 (nyiragongo, DRC)\r\n//lost woods: 10.88/48.9157/13.2556 (black forest, germany)\r\n//lon lon ranch: 12.27/27.50767/-97.88502 (king ranch, texas)\r\n//hyrule castle: 13.24/35.02071/135.76545 (kyoto, japan)\r\n//kokiri forest: 9.56/27.5501/96.4487 (miao,,arunachal pradesh, india)\r\n\r\n\r\n\r\nconst proxyUrl = 'https://corsproxy.io/?';\r\nconst apiUrl = 'http://worldtimeapi.org/api/timezone/Etc/GMT.json';\r\n\r\nconst url = `${proxyUrl}${encodeURIComponent(apiUrl)}`;\r\n\r\n// Function to calculate the time zone offset based on longitude\r\nfunction getTimeZoneOffset(longitude) {\r\n    // Each 15 degrees of longitude corresponds to 1 hour of time offset from UTC\r\n    let offset = Math.floor(longitude / 15);\r\n\r\n    // Check for Daylight Saving Time (DST)\r\n    const currentDate = new Date();\r\n    const isDST = isDaylightSavingTime(currentDate);\r\n\r\n    // If DST is in effect, adjust the offset by 1 hour\r\n    if (isDST) {\r\n        offset += 1;\r\n    }\r\n\r\n    return offset;\r\n}\r\n\r\n// Simple function to determine if DST is in effect (March to November for simplicity)\r\nfunction isDaylightSavingTime(date) {\r\n    const month = date.getMonth() + 1; // months are zero-indexed (0-11)\r\n    return month >= 3 && month <= 11; // Assume DST is in effect between March and November\r\n}\r\n\r\n// Function to fetch and display time with the adjusted time zone\r\nasync function getCurrentTime(lat, lon) {\r\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(`Error fetching time: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        const rawTime = data.current_weather.time; // ISO string format\r\n\r\n        // Convert to a user-friendly format\r\n        const datetime = new Date(rawTime);\r\n\r\n        // Calculate the time zone offset and apply it\r\n        const timeZoneOffset = getTimeZoneOffset(lon);\r\n        datetime.setHours(datetime.getHours() + timeZoneOffset);\r\n\r\n        // Formatting options for time display\r\n        const options = { \r\n            hour: '2-digit', minute: '2-digit', hour12: true,\r\n            \r\n        };\r\n\r\n        let formattedTime = datetime.toLocaleString('en-GB', options).replace(',', '').replace(/\\//g, ' ');\r\n        formattedTime = formattedTime.replace('am', 'AM').replace('pm', 'PM');\r\n        \r\n        // Display the formatted time\r\n        document.getElementById(\"time\").innerText = `${formattedTime}`;\r\n    } catch (error) {\r\n        console.error(\"Failed to fetch time:\", error);\r\n        document.getElementById(\"time\").innerText = \"Could not fetch time.\";\r\n    }\r\n}\r\n\r\n//day: '2-digit', month: 'short', year: 'numeric'\r\n\r\n// Function to fetch and display temperature\r\nasync function fetchTemperature(lat, lon) {\r\n    try {\r\n        // Fetch data from Open-Meteo\r\n        const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\r\n        const data = await response.json();\r\n\r\n        // Get the current temperature\r\n        const temperatureC = data.current_weather.temperature;\r\n        const temperatureF = (temperatureC * 9/5) + 32;\r\n\r\n        // Display the temperature below the time\r\n        document.getElementById('temperature').innerHTML = `${temperatureC}°C | ${temperatureF.toFixed(1)}°F`;\r\n    } catch (error) {\r\n        console.error(\"Error fetching temperature data:\", error);\r\n        document.getElementById('temperature').innerHTML = \"Temperature: N/A\";\r\n    }\r\n}\r\n\r\n// Function to update both time and temperature for the map's center\r\nfunction updateMapInfo() {\r\n    const center = map.getCenter(); // Get the current map center\r\n    // Update time and temperature for the center point\r\n    getCurrentTime(center.lat, center.lng); \r\n    fetchTemperature(center.lat, center.lng);\r\n}\r\n\r\n// Initial update of time and temperature\r\nupdateMapInfo();\r\n\r\n// Update time and temperature whenever the map is moved\r\nmap.on('moveend', updateMapInfo);\r\n\r\n// Create the custom cursor element\r\nconst cursor = document.createElement('div');\r\n    cursor.classList.add('custom-cursor');\r\n    document.body.appendChild(cursor);\r\n\r\n    // Add corner triangles\r\n    const topRight = document.createElement('div');\r\n    topRight.classList.add('top-right');\r\n    cursor.appendChild(topRight);\r\n\r\n    const bottomLeft = document.createElement('div');\r\n    bottomLeft.classList.add('bottom-left');\r\n    cursor.appendChild(bottomLeft);\r\n\r\n    // Update the cursor position on mousemove\r\n    document.body.addEventListener('mousemove', (event) => {\r\n      cursor.style.left = `${event.pageX - cursor.offsetWidth / 2}px`;\r\n      cursor.style.top = `${event.pageY - cursor.offsetHeight / 2}px`;\r\n    });\r\n\r\n// Optionally add zoom and navigation controls\r\nmap.addControl(new mapboxgl.NavigationControl());\r\n\n\n//# sourceURL=webpack:///./app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app.js"]();
/******/ 	
/******/ })()
;